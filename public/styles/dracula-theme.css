/* https://github.com/dracula/dracula-theme */

:root {
  --dracula_Background: #282a36;
  --dracula_CurrentLine: #44475a;
  --dracula_Selection: #44475a;
  --dracula_Foreground: #f8f8f2;
  --dracula_Comment: #6272a4;
  --dracula_Cyan: #8be9fd;
  --dracula_Green: #50fa7b;
  --dracula_Orange: #ffb86c;
  --dracula_Pink: #ff79c6;
  --dracula_Purple: #bd93f9;
  --dracula_Red: #ff5555;
  --dracula_Yellow: #f1fa8c;
}

/* ctrl+f dialog */
.code-container .CodeMirror-dialog.CodeMirror-dialog-top {
  background-color: var(--dracula_Foreground);
}

/* cursor */
.code-container .CodeMirror-cursors .CodeMirror-cursor {
  border-color: var(--dracula_Foreground);
}

/* code panel */
.code-container[role="editor-container"][data-readonly="true"]
  .CodeMirror.cm-s-default,
.code-container[role="editor-container"][data-readonly="true"]
  .CodeMirror.cm-s-snc,
.code-container[role="editor-container"] .CodeMirror.cm-s-default,
.code-container[role="editor-container"] .CodeMirror.cm-s-snc {
  background-color: var(--dracula_Background) !important;
}

.code-container .CodeMirror .CodeMirror-line {
  color: var(--dracula_Foreground);
  /* font-size: 14px; */
}

/* text selection */
.code-container .CodeMirror .CodeMirror-selected {
  background-color: var(--dracula_Selection);
}

/* tag separators in html <, >, / */
.code-container .cm-s-default .cm-tag.cm-bracket {
  color: var(--dracula_Foreground);
}

/* tag names (div, span, img ...) */
.code-container .cm-s-default .cm-tag {
  color: var(--dracula_Pink);
}

/* html attributes (class, title, id..)*/
.code-container .cm-s-default .cm-attribute {
  color: var(--dracula_Green);
}

/* strings */
.code-container .cm-s-default .cm-string {
  color: var(--dracula_Yellow);
}

/* comments */
.code-container .cm-s-default .cm-comment {
  color: var(--dracula_Comment);
}

/* SERVER SCRIPT */
/* if, var, return */
.code-container .cm-s-snc span.cm-keyword {
  color: var(--dracula_Pink);
}

/* variables */
.code-container .cm-s-snc span.cm-variable,
.code-container .cm-s-snc span.cm-variable-2,
.code-container .cm-s-snc span.cm-def,
.code-container .cm-s-snc span.cm-property {
  color: var(--dracula_Foreground);
}

.code-container .cm-s-snc span.cm-property {
  color: var(--dracula_Green);
}

.code-container .cm-s-snc span.cm-comment {
  color: var(--dracula_Comment);
}

/* string */
.code-container .cm-s-snc span.cm-string {
  color: var(--dracula_Yellow);
}

/* operator (=, + ) */
.code-container .cm-s-snc span.cm-operator {
  color: var(--dracula_Pink);
}

/* atom (true, + ) */
.code-container .cm-s-snc span.cm-atom,
.code-container .cm-s-snc span.cm-number {
  color: var(--dracula_Purple);
}

/* CSS */

/* css selectors .class and #id */
.code-container span.cm-qualifier,
.code-container span.cm-builtin {
  color: var(--dracula_Green);
}

/* css variables like --varName: 10px */
.code-container .cm-s-default .cm-variable-2 {
  color: var(--dracula_Foreground);
}

/* css pseudo-classes */
.code-container .cm-s-default .cm-variable-3 {
  color: var(--dracula_Green);
}

/* 
  property is the css props (position, display...) 
  meta showed like (-webkit)
*/
.code-container .cm-s-default span.cm-property,
.code-container .cm-s-default span.cm-meta {
  color: var(--dracula_Cyan);
}

.code-container .cm-s-default span.cm-atom,
.code-container .cm-s-default span.cm-number {
  color: var(--dracula_Purple);
}

.code-container .cm-s-default .cm-keyword {
  color: var(--dracula_Purple);
}

/* at-rules like @media, @keyframes  */
.code-container .cm-s-default .cm-def {
  color: var(--dracula_Pink);
}

/* css functions like var(), calc(), etc.. */
.code-container .cm-s-default .cm-variable.cm-callee {
  color: var(--dracula_Cyan);
}

/* string literals */
.code-container .cm-s-default .cm-string-2,
.code-container .cm-s-snc .cm-string-2 {
  color: var(--dracula_Yellow);
}

/* error */
.code-container .cm-s-default .cm-error,
.code-container .cm-s-snc .cm-error {
  color: var(--dracula_Red);
}